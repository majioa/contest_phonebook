require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe PeopleController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Person. As you add validations to Person, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { fullname: 'Name', email: 'q@q.e', phone: '+7-111-1111111',
      description: 'desc'}
  }

  let(:invalid_attributes) {
    { fullname: nil }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PeopleController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all people as @people" do
      person = Person.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:people)).to eq([person])
    end
  end

  describe "GET #show" do
    it "assigns the requested person as @person" do
      person = Person.create! valid_attributes
      get :show, {:id => person.to_param}, valid_session
      expect(assigns(:person)).to eq(person)
    end
  end

  describe "GET #new" do
    it "assigns a new person as @person" do
      get :new, {}, valid_session
      expect(assigns(:person)).to be_a_new(Person)
    end
  end

  describe "GET #edit" do
    it "assigns the requested person as @person" do
      person = Person.create! valid_attributes
      get :edit, {:id => person.to_param}, valid_session
      expect(assigns(:person)).to eq(person)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Person" do
        expect {
          post :create, {:person => valid_attributes}, valid_session
        }.to change(Person, :count).by(1)
      end

      it "assigns a newly created person as @person" do
        post :create, {:person => valid_attributes}, valid_session
        expect(assigns(:person)).to be_a(Person)
        expect(assigns(:person)).to be_persisted
      end

      it "redirects to the created person" do
        post :create, {:person => valid_attributes}, valid_session
        expect(response).to redirect_to(Person.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved person as @person" do
        post :create, {:person => invalid_attributes}, valid_session
        expect(assigns(:person)).to be_a_new(Person)
      end

      it "re-renders the 'new' template" do
        post :create, {:person => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        { fullname: 'Name1', email: 'q@q1.e', phone: '+7-222-1111111',
            description: 'new desc'}
      }

      it "updates the requested person" do
        person = Person.create! valid_attributes
        put :update, {:id => person.to_param, :person => new_attributes}, valid_session
        person.reload
        expect(person.fullname).to be_eql(new_attributes[:fullname])
      end

      it "assigns the requested person as @person" do
        person = Person.create! valid_attributes
        put :update, {:id => person.to_param, :person => valid_attributes}, valid_session
        expect(assigns(:person)).to eq(person)
      end

      it "redirects to the person" do
        person = Person.create! valid_attributes
        put :update, {:id => person.to_param, :person => valid_attributes}, valid_session
        expect(response).to redirect_to(person)
      end
    end

    context "with invalid params" do
      it "assigns the person as @person" do
        person = Person.create! valid_attributes
        put :update, {:id => person.to_param, :person => invalid_attributes}, valid_session
        expect(assigns(:person)).to eq(person)
      end

      it "re-renders the 'edit' template" do
        person = Person.create! valid_attributes
        put :update, {:id => person.to_param, :person => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested person" do
      person = Person.create! valid_attributes
      expect {
        delete :destroy, {:id => person.to_param}, valid_session
      }.to change(Person, :count).by(-1)
    end

    it "redirects to the people list" do
      person = Person.create! valid_attributes
      delete :destroy, {:id => person.to_param}, valid_session
      expect(response).to redirect_to(people_url)
    end
  end

  context "CSV" do
    render_views

    let(:csv) {
       ([ Person.column_names.join(',') ] <<
          Person.all.map do |p|
            p.attributes.values_at(*Person.column_names).join(',')
          end).join("\n")
    }

    let(:csv_file) {
      Rack::Test::UploadedFile.new("spec/fixtures/files/updated.csv", "text/csv")
    }

    let(:other_valid_attributes) {
      { fullname: 'Other Name', email: 'qq@q.e', phone: '+7-000-1111111',
        description: 'other desc'}
    }

    let(:third_valid_attributes) {
      { fullname: 'Third Name', email: 'qqq@q.e', phone: '+7-1111111',
        description: 'third desc'}
    }

    describe "GET #index - download CVS" do
      it "assigns all people as @people" do
        person = Person.create! valid_attributes
        get :index, { format: :csv }, valid_session
        expect(assigns(:people)).to eq([person])
        expect(response.body.strip).to eq(csv)
      end
    end

    describe "PUT #import - upload CVS" do
      it "assigns all people as @people" do
        person1 = Person.create! valid_attributes
        person2 = Person.create! other_valid_attributes
        person3 = Person.create! third_valid_attributes
        put :upload_csv, { csv: csv_file }
        expect(response).to redirect_to(people_url)
        people = Person.all
        expect(people[0].fullname).to_not eq(person1.fullname)
        expect(people[1].fullname).to eq(person2.fullname)
        expect(people[2].fullname).to eq('Name4')
        expect { person3.reload }.to raise_error(ActiveRecord::RecordNotFound)
      end
    end

    describe "GET #import" do
      it "show import form" do
        get :import, valid_session
        expect(response).to render_template("import")
      end
    end
  end
end
